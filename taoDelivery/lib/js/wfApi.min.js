
var wf_STATE={'ITEM':{'PRE_FINISHED':'pre_item_finished','FINISHED':'item_finished','POST_FINISHED':'post_item_finished'}};
function RecoveryContext(){var _recoveryCtx=this;this.registry=null;this.sourceService={type:'sync',data:null,url:'/wfEngine/RecoveryContext/retrieve',params:{},method:'post',format:'json'};this.destinationService={type:'sync',url:'/wfEngine/RecoveryContext/save',params:{},method:'post',format:'json',flush:true};this.initSourceService=function(environment){if($.isPlainObject(environment)){if(environment.type){if($.inArray(environment.type,['manual','sync','async'])>-1){this.sourceService.type=environment.type;}}
if(this.sourceService.type=='manual'&&$.isPlainObject(environment.data)){this.sourceService.data=environment.data;}
else{if(environment.url){if(/(\/[-a-z\d%_.~+]*)*(\?[;&a-z\d%_.~+=-]*)?(\#[-a-z\d_]*)?$/.test(environment.url)){this.sourceService.url=environment.url;}}
if($.isPlainObject(environment.params)){for(key in environment.params){if($.inArray((typeof environment.params[key]).toLowerCase(),['string','number','int','float','boolean'])>-1){this.sourceService.params[key]=environment.params[key];}}}
if(environment.method){if(/^get|post$/i.test(environment.method)){this.sourceService.method=environment.method;}}}}};this.retrieveContext=function(){if(this.sourceService.type=='manual'){this.registry=this.sourceService.data;}
else{var ctxResponse=$.ajax({async:false,url:this.sourceService.url,data:this.sourceService.params,type:this.sourceService.method,dataType:this.sourceService.format}).responseText;try{this.registry=$.parseJSON(ctxResponse);}
catch(jsonException){console.log(ctxResponse);}}};this.initDestinationService=function(environment){if($.isPlainObject(environment)){if(environment.type){if($.inArray(environment.type,['sync','async'])>-1){this.destinationService.type=environment.type;}}
if(environment.url){if(/(\/[-a-z\d%_.~+]*)*(\?[;&a-z\d%_.~+=-]*)?(\#[-a-z\d_]*)?$/.test(environment.url)){this.destinationService.url=environment.url;}}
if($.isPlainObject(environment.params)){for(key in environment.params){if($.inArray((typeof environment.params[key]).toLowerCase(),['string','number','int','float','boolean'])>-1){this.destinationService.params[key]=environment.params[key];}}}
if(environment.method){if(/^get|post$/i.test(environment.method)){this.destinationService.method=environment.method;}}
if(environment.flush){this.destinationService.flush=(environment.flush===true);}}};this.saveContext=function(){var registryParams=this.destinationService.params;registryParams['context']=new Object();for(key in this.registry){registryParams['context'][key]=this.registry[key];}
$.ajax({async:(this.destinationService.type=='async'),url:this.destinationService.url,data:registryParams,type:this.destinationService.method,dataType:this.destinationService.format,success:function(data){if(data.saved){if(_recoveryCtx.destinationService.flush){_recoveryCtx.registry=new Object();}}}});};this.getContext=function(key){if(this.registry==null){this.retrieveContext();}
if(this.registry!=null){return(this.registry[key])?this.registry[key]:{};}
return{};};this.setContext=function(key,value){if(this.registry==null){this.registry=new Object();}
if(key!=''){this.registry[key]=value;}};}
var wfApi={context:window.top.document||window.document};function forward(){var next=wfApi.context.getElementById('next');if(next){$(next).trigger('click');}}
function backward(){var back=wfApi.context.getElementById('back');if(back){$(back).trigger('click');}}
function pause(){var pause=wfApi.context.getElementById('pause');if(pause){$(pause).trigger('click');}}
if(typeof(finish)!='function'){function finish(){$(window).trigger(wf_STATE.ITEM.PRE_FINISHED);$(window).trigger(wf_STATE.ITEM.FINISHED);$(window).trigger(wf_STATE.ITEM.POST_FINISHED);}
function onFinish(callback){$(window).bind(wf_STATE.ITEM.FINISHED,callback);}
function beforeFinish(callback){$(window).bind(wf_STATE.ITEM.PRE_FINISHED,callback);}
function afterFinish(callback){$(window).bind(wf_STATE.ITEM.POST_FINISHED,callback);}}
afterFinish(forward);var recoveryCtx=new RecoveryContext();function initRecoveryContext(source,destination){recoveryCtx.initSourceService(source);recoveryCtx.initDestinationService(destination);}
function getRecoveryContext(key){return recoveryCtx.getContext(key);}
function setRecoveryContext(key,data){recoveryCtx.setContext(key,data);recoveryCtx.saveContext();}
function deleteRecoveryContext(key){setRecoveryContext(key,null);}